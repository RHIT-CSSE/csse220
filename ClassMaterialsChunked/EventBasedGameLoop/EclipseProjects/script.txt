Abbreviated steps here, more elaboration below:

1.  Main.java: replace while loop with button pressed (comment out while, we will show it later)
2.  Main.java: create timer and run game
3.  Main.java, GameComponent.java:  make box switch directions (GameComponent.dx) on button press
4.  Raindrop.java:  Look at code show student what it is suppoed to do
5.  GameComponent.java: make loop to draw raindrops so we can see them
6.  Run program and see the raindrop count keep getting larger and larger (what should we do here?)
7.  GameComponent.java: Try naive approach to removing the raindrops from the list (uncomment) -  run and see concurrent when raindrops hit bottom
8.  GameComponent.java: Uncomment code to create list to store drops to remove and then remove them
9.  Raindrop.java:  Ask students, how could we get the box to absorb raindrops?  (add method insideBox(Rectnagle2D.Double box) to Raindrop.java )
10. GameComponent.java: use insideBox method to add raindrops to list to remove inside the updateRaindrops method
11. Main.java (revert Main.java or uncomment): to run the original loop and show the concurrent modification exception



The goal of this exercise is to demonstrate how to create a basic game loop and to show some of the ideas of concurrency. 

Start by running the program as-is. It shows that using a while loop for the game loop throttles it.

Replace the while loop with button input to advance one tick (just by adding the advanceListener to the button). 
Slows it down, but no one wants to press a button!

So create and start a Timer with the given delay.

Then do the next couple TODOs to add functions to the game:

1. Make the button change the direction of motion. (Via a toggleBoxDirection method)

2. Add falling raindrops.

Note: to show concurrency, do the "natural" way to remove the drops first:

for (Raindrop drop : this.raindrops) {
    boolean shouldRemove = drop.fall(this.getHeight());
	if (shouldRemove ) {
	    this.raindrops.remove(drop);
	}	
}

It will throw a ConcurrentModificationException when the first drop hits the ground. Why? Because iterators aren't designed to be thread safe and we are mutating the list while we are iterating over it.

That motivates the solution to use a raindropsToRemove list.

3. Make the box "catch" drops that hit it.

Finally, go back to the while loop solution at the end (without the timer) to show students that we still get exceptions!

Why? Because we are modifying the list of drops in update raindrops at the same time that paintComponent is iterating over the drops. Why didn't this happen before? The timer kept us out of trouble!

Our loop does this repeatedly:
Timer tick k
| Modify the state of the model.
| repaint() - tells the GUI thread to update.
|
| Wait a long time (50 ms!) until next tick. 
|
v
Timer tick (k+1)

Note that using a timer delay of 0 or manually reversing the order of modifying the list and repainting should cause an exception,
but neither does. Might be getting lucky. The while loop does the trick, though.
 


